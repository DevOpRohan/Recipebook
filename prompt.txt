//models/favorite.js
```
const mongoose = require('mongoose');

const FavoriteSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
  },
  recipe: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Recipe',
  },
  favoritesCount: {
    type: Number,
    default: 0,
  },
  favorites: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Favorite',
    },
  ],
});

module.exports = mongoose.model('Favorite', FavoriteSchema);
```

//models/recipe.js
```
const mongoose = require('mongoose');

const RecipeSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
  },
  name: {
    type: String,
    required: true,
  },
  description: {
    type: String,
  },
  image: {
    type: String,
  },
  ingredients: {
    type: String,
    required: true,
  },
  instructions: {
    type: String,
    required: true,
  },
  topic: {
    type: String,
  },
  category: {
    type: String,
  },
  difficulty: {
    type: String,
  },
  time: {
    type: String,
  },
  date: {
    type: Date,
    default: Date.now,
  },
  favorites: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Favorite',
    },
  ],

  favoritesCount: {
    type: Number,
    default: 0,
  },

});

module.exports = mongoose.model('Recipe', RecipeSchema);
```

//models/topic.js
```
const mongoose = require('mongoose');

const TopicSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
});

module.exports = mongoose.model('Topic', TopicSchema);
```

//models/user.js
```
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  avatar: {
    type: String,
  },
  bio: {
    type: String,
  },
  favorites: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Favorite',
    },
  ],
});

module.exports = mongoose.model('User', UserSchema);
```

//routes/favorites.js
```
const express = require('express');
const { ensureAuthenticated } = require('../middlewares/auth');
const favoritesController = require('../controllers/favoritesController');
const router = express.Router();

router.get('/', ensureAuthenticated, favoritesController.getFavorites);
router.get('/toggle/:recipeId', ensureAuthenticated, favoritesController.toggleFavorite);
router.get('/delete_favorite/:recipeId', ensureAuthenticated, favoritesController.delete_favorite);

module.exports = router;
```

//routes/index.js
```
const express = require('express');
const homeController = require('../controllers/homeController');
const aboutController = require('../controllers/aboutController');
const helpController = require('../controllers/helpController');
const router = express.Router();

router.get('/', homeController.getHomePage);
router.get('/about', aboutController.getAbout);
router.get('/help', helpController.getHelp);

module.exports = router;
```

//routes/recipes.js
```
// const express = require('express');
// const recipesController = require('../controllers/recipesController');
// const createController = require('../controllers/createController');
// const { ensureAuthenticated } = require('../middlewares/auth');
// const router = express.Router();

// router.get('/', recipesController.getAllRecipes);
// router.get('/:id', recipesController.getRecipeById);
// router.get('/create', ensureAuthenticated, createController.getNewRecipeForm);
// router.post('/create', ensureAuthenticated, createController.createRecipe);

// module.exports = router;



const express = require('express');
const { ensureAuthenticated } = require('../middlewares/auth');
const createController = require('../controllers/createController');
const recipesController = require('../controllers/recipesController');
const router = express.Router();

router.get('/new', ensureAuthenticated, createController.getNewRecipe);
router.post('/new', ensureAuthenticated, createController.createRecipe);

router.get('/my', ensureAuthenticated, recipesController.getUserRecipes);

router.get('/', recipesController.getAllRecipes);
router.get('/:id', recipesController.getRecipe);
router.get('/:id/edit', ensureAuthenticated, recipesController.editRecipe);
router.put('/:id', ensureAuthenticated, recipesController.updateRecipe);
router.delete('/:id', ensureAuthenticated, recipesController.deleteRecipe);
module.exports = router;
```

//routes/topics.js
```
// const express = require('express');
// const topicsController = require('../controllers/topicsController');
// const router = express.Router();

// router.get('/', topicsController.getAllTopics);

// module.exports = router;

const express = require('express');
const topicsController = require('../controllers/topicsController');
const router = express.Router();

router.get('/', topicsController.getAllTopics);

module.exports = router;
```

//routes/users.js
```
const { validationResult } = require('express-validator');
const express = require('express');
const passport = require('passport');
const signUpController = require('../controllers/signUpController');
const loginController = require('../controllers/loginController');
const profileController = require('../controllers/profileController');

const { ensureAuthenticated } = require('../middlewares/auth');
const { check } = require('express-validator');
const router = express.Router();

router.get('/signup', signUpController.getSignUp);
router.post(
  '/signup',
  [
    check('name', 'Name is required').notEmpty(),
    check('email', 'Please include a valid email').isEmail(),
    check('password', 'Please enter a password with 6 or more characters').isLength({ min: 6 }),
  ],
  signUpController.createUser
);

router.get('/login', loginController.getLogin);
router.post(
  '/login',
  [
    check('email', 'Please include a valid email').isEmail(),
    check('password', 'Password is required').notEmpty(),
  ],
  loginController.postLogin
);


router.get('/profile', ensureAuthenticated, profileController.getProfile);
router.post('/profile', ensureAuthenticated, profileController.updateProfile);


router.get('/logout', (req, res) => {
  req.logout(() => {
    req.flash('success_msg', 'You are logged out');
    res.redirect('/users/login');
  });
});

// router.get('/:userId/profile', ensureAuthenticated, profileController.getUserProfile);
router.get('/profile/:userId',  profileController.getUserProfile);

module.exports = router;
```

//controllers/aboutController.js
```
exports.getAbout = (req, res) => {
    res.render('about/index');
  };
```

//controllers/createController.js
```
const Recipe = require('../models/recipe');

exports.getNewRecipe = (req, res) => {
  res.render('create/new');
};

exports.createRecipe = async (req, res) => {
  try {
    const newRecipe = new Recipe({
      user: req.user.id,
      name: req.body.name,
      description: req.body.description,
      image: req.body.image,
      ingredients: req.body.ingredients,
      instructions: req.body.instructions,
      topic: req.body.topic,
      category: req.body.category,
      difficulty: req.body.difficulty,
      time: req.body.time,
    });

    await newRecipe.save();
    req.flash('success_msg', 'Recipe created successfully');
    res.redirect('/recipes/my');
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error creating recipe');
    res.redirect('/create/new');
  }
};
```

//controllers/favoritesController.js
```
const Recipe = require('../models/recipe');
const Favorite = require('../models/favorite');

// exports.toggleFavorite = async (req, res) => {
//   try {
//     const recipe = await Recipe.findById(req.params.recipeId);
//     const favorite = await Favorite.findOne({ user: req.user.id, recipe: recipe.id });

//     if (favorite) {
//       await Favorite.deleteOne({ _id: favorite._id });
//     } else {
//       const newFavorite = new Favorite({ user: req.user.id, recipe: recipe.id });
//       await newFavorite.save();
//     }

//     res.redirect('/');
//   } catch (err) {
//     console.error(err);
//     req.flash('error_msg', 'Error toggling favorite');
//     res.redirect('/');
//   }
// }

exports.toggleFavorite = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.recipeId);
    const favorite = await Favorite.findOne({ user: req.user.id, recipe: recipe.id });

    if (favorite) {
      await Favorite.deleteOne({ _id: favorite._id });
      await Recipe.findByIdAndUpdate(req.params.recipeId, { $inc: { favoritesCount: -1 } });
    } else {
      const newFavorite = new Favorite({ user: req.user.id, recipe: recipe.id });
      await newFavorite.save();
      await Recipe.findByIdAndUpdate(req.params.recipeId, { $inc: { favoritesCount: 1 } });
    }

    res.redirect('/');
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error toggling favorite');
    res.redirect('/');
  }
};

exports.delete_favorite = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.recipeId);
    const favorite = await Favorite.findOne({ user: req.user.id, recipe: recipe.id });

    if (favorite) {
      await Favorite.deleteOne({ _id: favorite._id });
    } else {
      const newFavorite = new Favorite({ user: req.user.id, recipe: recipe.id });
      await newFavorite.save();
    }

    res.redirect('/favorites');
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error toggling favorite');
    res.redirect('/');
  }
};


exports.getFavorites = async (req, res) => {
  try {
    const favorites = await Favorite.find({ user: req.user.id }).populate('recipe');
    res.render('favorites/index', { favorites });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading favorites');
    res.redirect('/');
  }
};
```

//controllers/helpController.js
```
exports.getHelp = (req, res) => {
    res.render('help/index');
  };
```

//controllers/homeController.js
```
const Recipe = require('../models/recipe');

// exports.getHomePage = async (req, res) => {
//   try {
//     const page = parseInt(req.query.page) || 1;
//     const limit = 6;
//     const skip = (page - 1) * limit;

//     const recipes = await Recipe.find({})
//       .sort({ date: -1 })
//       .skip(skip)
//       .limit(limit)
//       .populate('user');

//     const totalRecipes = await Recipe.countDocuments();
//     const totalPages = Math.ceil(totalRecipes / limit);

//     res.render('home/index', { recipes, page, totalPages });
//   } catch (err) {
//     console.error(err);
//     req.flash('error_msg', 'Error loading home page');
//     res.redirect('/');
//   }
// };
exports.getHomePage = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = 6;
    const skip = (page - 1) * limit;

    let recipes = await Recipe.find({})
      .sort({ date: -1 })
      .skip(skip)
      .limit(limit)
      .populate('user')
      .populate('favorites');

    recipes = await populateFavoritesWithUser(recipes);

    const totalRecipes = await Recipe.countDocuments();
    const totalPages = Math.ceil(totalRecipes / limit);

    res.render('home/index', { recipes, page, totalPages });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading home page');
    res.redirect('/');
  }
};

const populateFavoritesWithUser = async (recipes) => {
  return await Promise.all(
    recipes.map(async (recipe) => {
      const populatedFavorites = await Promise.all(
        recipe.favorites.map(async (favoriteId) => {
          const favorite = await Favorite.findById(favoriteId).populate('user');
          return favorite;
        })
      );
      recipe.favorites = populatedFavorites;
      return recipe;
    })
  );
};
```

//controllers/loginController.js
```
const passport = require('passport');
const { validationResult } = require('express-validator');

exports.getLogin = (req, res) => {
  res.render('login/index');
};

exports.postLogin = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    req.flash('errors', errors.array());
    return res.redirect('/users/login');
  }
  passport.authenticate('local', {
    successRedirect: '/',
    failureRedirect: '/users/login',
    failureFlash: true,
  })(req, res, next);
};
```

//controllers/profileController.js
```
const User = require('../models/user');
const Recipe = require('../models/recipe');

exports.getProfile = (req, res) => {
  res.render('profile/index', { user: req.user });
};

exports.updateProfile = async (req, res) => {
  try {
    await User.findByIdAndUpdate(req.user.id, req.body);
    res.redirect('/users/profile');;
  } catch (err) {
    console.error(err);
    res.status(500).send('Server Error');
  }
};

exports.getUserProfile = async (req, res) => {
  try {
    const profileUser = await User.findById(req.params.userId);
    const recipes = await Recipe.find({ user: profileUser.id }).populate('user');
    res.locals.profileUser = profileUser; // Add this line
    res.render('users/profile', { profileUser, recipes });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading user profile');
    res.redirect('/');
  }
};
```

//controllers/recipesController.js
```
const Recipe = require('../models/recipe');

exports.getAllRecipes = async (req, res) => {
  try {
    const recipes = await Recipe.find({}).populate('user');
    res.render('recipes/index', { recipes });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading recipes');
    res.redirect('/');
  }
};

exports.getRecipe = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id).populate('user');
    res.render('recipes/show', { recipe });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading recipe');
    res.redirect('/recipes');
  }
};

exports.editRecipe = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);
    if (recipe.user.toString() !== req.user.id) {
      req.flash('error_msg', 'Not authorized');
      return res.redirect('/login');
    }
    res.render('recipes/edit', { recipe });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading recipe');
    res.redirect('/recipes/edit');
  }
};

exports.updateRecipe = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);
    if (recipe.user.toString() !== req.user.id) {
      req.flash('error_msg', 'Not authorized');
      return res.redirect('/login');
    }
    Object.assign(recipe, req.body);
    await recipe.save();
    req.flash('success_msg', 'Recipe updated successfully');
    res.redirect('/recipes/my');
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error updating recipe');
    res.redirect('/recipes/edit');
  }
};

exports.deleteRecipe = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);
    if (recipe.user.toString() !== req.user.id) {
      req.flash('error_msg', 'Not authorized');
      return res.redirect('/recipes/login');
    }
    await Recipe.deleteOne({ _id: req.params.id }); // Update this line
    req.flash('success_msg', 'Recipe deleted successfully');
    res.redirect('/recipes/my');
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error deleting recipe');
    res.redirect('/recipes/my');
  }
};

exports.getUserRecipes = async (req, res) => {
  try {
    const recipes = await Recipe.find({ user: req.user._id }).populate('user'); // Filter recipes based on the logged-in user
    res.render('recipes/index', { recipes });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading recipes');
    res.redirect('/');
  }
};
```

//controllers/signUpController.js
```
const User = require('../models/user');
const bcrypt = require('bcryptjs');
const { validationResult } = require('express-validator');

exports.getSignUp = (req, res) => {
  res.render('signUp/index');
};

exports.createUser = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).render('signUp/index', { errors: errors.array() });
  }

  try {
    const { name, email, password } = req.body;
    const user = new User({ name, email, password });

    // Hash password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);

    await user.save();
    req.flash('success_msg', 'You are now registered and can log in');
    res.redirect('/users/login');
  } catch (err) {
    console.error(err);
    res.status(500).send('Server Error');
  }
};
```

//controllers/topicsController.js
```
const Recipe = require('../models/recipe');

exports.getAllTopics = async (req, res) => {
  try {
    const topicsAggregation = await Recipe.aggregate([
      {
        $group: {
          _id: { $toLower: '$topic' },
          recipes: { $push: '$$ROOT' },
        },
      },
    ]);

    const topics = topicsAggregation.map((topic) => topic._id);
    const recipesByTopic = {};

    for (const topicAggregation of topicsAggregation) {
      const topic = topicAggregation._id;
      const recipes = await Promise.all(
        topicAggregation.recipes.map(async (recipe) => {
          const populatedRecipe = await Recipe.populate(recipe, 'user');
          return populatedRecipe;
        })
      );
      recipesByTopic[topic] = recipes;
    }

    res.render('topics/index', { topics, recipesByTopic });
  } catch (err) {
    console.error(err);
    req.flash('error_msg', 'Error loading topics');
    res.redirect('/');
  }
};
```

